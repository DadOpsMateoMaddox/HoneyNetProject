#!/usr/bin/env python3
"""
CerberusMesh Quick Start Deployment Script

This script helps you quickly deploy CerberusMesh with your API keys
and integrate it with your website for attack monitoring.
"""

import os
import sys
import subprocess
import json
from pathlib import Path

def check_requirements():
    """Check if all requirements are met."""
    print("üîç Checking requirements...")
    
    # Check Python version
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ required")
        return False
    
    # Check if AWS CLI is installed
    try:
        subprocess.run(['aws', '--version'], capture_output=True, check=True)
        print("‚úÖ AWS CLI found")
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå AWS CLI not found. Please install it first.")
        return False
    
    return True

def collect_api_keys():
    """Collect API keys from user."""
    print("\nüóùÔ∏è  Please provide your API keys:")
    
    config = {}
    
    # Required keys
    config['AWS_ACCESS_KEY_ID'] = input("AWS Access Key ID: ").strip()
    config['AWS_SECRET_ACCESS_KEY'] = input("AWS Secret Access Key: ").strip()
    config['AWS_DEFAULT_REGION'] = input("AWS Region (default: us-east-1): ").strip() or 'us-east-1'
    config['OPENAI_API_KEY'] = input("OpenAI API Key: ").strip()
    
    # Website integration
    print("\nüåê Website Integration:")
    config['WEBHOOK_URL'] = input("Your website webhook URL (optional): ").strip()
    config['WEBHOOK_SECRET'] = input("Webhook secret key (optional): ").strip()
    
    # Optional enterprise integrations
    print("\nüè¢ Enterprise Integrations (optional - press Enter to skip):")
    
    splunk_url = input("Splunk HEC URL: ").strip()
    if splunk_url:
        config['SPLUNK_HEC_URL'] = splunk_url
        config['SPLUNK_HEC_TOKEN'] = input("Splunk HEC Token: ").strip()
        config['SPLUNK_INDEX'] = input("Splunk Index (default: cerberusmesh): ").strip() or 'cerberusmesh'
    
    nessus_url = input("Nessus Server URL: ").strip()
    if nessus_url:
        config['NESSUS_SERVER_URL'] = nessus_url
        config['NESSUS_ACCESS_KEY'] = input("Nessus Access Key: ").strip()
        config['NESSUS_SECRET_KEY'] = input("Nessus Secret Key: ").strip()
    
    # Database configuration
    print("\nüóÑÔ∏è  Database Configuration:")
    db_type = input("Database type (sqlite/postgresql/mysql) [sqlite]: ").strip() or 'sqlite'
    config['DB_TYPE'] = db_type
    
    if db_type != 'sqlite':
        config['DB_HOST'] = input(f"{db_type.title()} Host: ").strip()
        config['DB_PORT'] = input(f"{db_type.title()} Port: ").strip()
        config['DB_NAME'] = input("Database Name [cerberusmesh]: ").strip() or 'cerberusmesh'
        config['DB_USER'] = input("Database User: ").strip()
        config['DB_PASSWORD'] = input("Database Password: ").strip()
    
    return config

def create_env_file(config):
    """Create .env file with configuration."""
    print("\nüìù Creating environment configuration...")
    
    env_content = f"""# CerberusMesh Environment Configuration
# Generated by quick_start.py

# === REQUIRED CREDENTIALS ===
AWS_ACCESS_KEY_ID={config.get('AWS_ACCESS_KEY_ID', '')}
AWS_SECRET_ACCESS_KEY={config.get('AWS_SECRET_ACCESS_KEY', '')}
AWS_DEFAULT_REGION={config.get('AWS_DEFAULT_REGION', 'us-east-1')}
OPENAI_API_KEY={config.get('OPENAI_API_KEY', '')}

# === WEBSITE INTEGRATION ===
WEBHOOK_URL={config.get('WEBHOOK_URL', '')}
WEBHOOK_SECRET={config.get('WEBHOOK_SECRET', '')}
WEBHOOK_TIMEOUT=30

# === ENTERPRISE INTEGRATIONS ===
SPLUNK_HEC_URL={config.get('SPLUNK_HEC_URL', '')}
SPLUNK_HEC_TOKEN={config.get('SPLUNK_HEC_TOKEN', '')}
SPLUNK_INDEX={config.get('SPLUNK_INDEX', 'cerberusmesh')}
SPLUNK_VERIFY_SSL=true

NESSUS_SERVER_URL={config.get('NESSUS_SERVER_URL', '')}
NESSUS_ACCESS_KEY={config.get('NESSUS_ACCESS_KEY', '')}
NESSUS_SECRET_KEY={config.get('NESSUS_SECRET_KEY', '')}
NESSUS_VERIFY_SSL=true

# === DATABASE CONFIGURATION ===
DB_TYPE={config.get('DB_TYPE', 'sqlite')}
DB_HOST={config.get('DB_HOST', '')}
DB_PORT={config.get('DB_PORT', '5432')}
DB_NAME={config.get('DB_NAME', 'cerberusmesh')}
DB_USER={config.get('DB_USER', '')}
DB_PASSWORD={config.get('DB_PASSWORD', '')}
DB_SSL_ENABLED=true

# === MONITORING & SECURITY ===
GRAFANA_UI_HOST=0.0.0.0
GRAFANA_UI_PORT=3000
GRAFANA_UI_THEME=dark
GRAFANA_UI_ENABLE_WEBSOCKET=true

API_HOST=0.0.0.0
API_PORT=8000
API_RATE_LIMIT=1000
ENABLE_AUDIT_LOGGING=true

LOG_LEVEL=INFO
METRICS_ENABLED=true
HEALTH_CHECK_INTERVAL=60

# === HONEYPOT CONFIGURATION ===
HONEYPOT_COUNT=3
HONEYPOT_REGIONS=us-east-1,us-west-2
HONEYPOT_INSTANCE_TYPE=t3.micro
HONEYPOT_AMI_ID=ami-0c02fb55956c7d316

ENABLE_ATTACK_SIMULATION=true
SIMULATION_FREQUENCY=3600
SIMULATION_INTENSITY=medium

DATA_RETENTION_DAYS=90
BACKUP_ENABLED=true
BACKUP_INTERVAL=daily
"""
    
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print("‚úÖ Environment file created: .env")

def install_dependencies():
    """Install Python dependencies."""
    print("\nüì¶ Installing dependencies...")
    
    requirements = [
        "boto3",
        "openai",
        "fastapi",
        "uvicorn",
        "aiohttp",
        "redis",
        "psycopg2-binary",  # PostgreSQL
        "aiomysql",         # MySQL
        "aiosqlite",        # SQLite
        "asyncpg",          # PostgreSQL async
        "jinja2",
        "python-multipart",
        "websockets"
    ]
    
    try:
        subprocess.run([
            sys.executable, '-m', 'pip', 'install'
        ] + requirements, check=True)
        print("‚úÖ Dependencies installed")
    except subprocess.CalledProcessError:
        print("‚ùå Failed to install dependencies")
        return False
    
    return True

def test_aws_connection():
    """Test AWS connection with provided credentials."""
    print("\nüîó Testing AWS connection...")
    
    try:
        import boto3
        ec2 = boto3.client('ec2')
        regions = ec2.describe_regions()
        print(f"‚úÖ AWS connection successful. Available regions: {len(regions['Regions'])}")
        return True
    except Exception as e:
        print(f"‚ùå AWS connection failed: {e}")
        return False

def test_openai_connection():
    """Test OpenAI API connection."""
    print("\nü§ñ Testing OpenAI connection...")
    
    try:
        import openai
        # Try a simple API call
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": "Test"}],
            max_tokens=1
        )
        print("‚úÖ OpenAI connection successful")
        return True
    except Exception as e:
        print(f"‚ùå OpenAI connection failed: {e}")
        return False

def create_webhook_example():
    """Create example webhook code for user's website."""
    print("\nüîó Creating webhook example for your website...")
    
    webhook_code = '''# Example webhook handler for your website
# Add this to your Flask/Django/FastAPI application

from flask import Flask, request, jsonify
import hmac
import hashlib
import os

app = Flask(__name__)

@app.route('/api/attack-webhook', methods=['POST'])
def attack_webhook():
    """Handle incoming attack notifications from CerberusMesh."""
    
    # Verify webhook signature
    signature = request.headers.get('X-Signature', '')
    payload = request.get_data()
    
    expected_signature = hmac.new(
        os.environ.get('WEBHOOK_SECRET', '').encode(),
        payload,
        hashlib.sha256
    ).hexdigest()
    
    if not hmac.compare_digest(signature, expected_signature):
        return jsonify({'error': 'Invalid signature'}), 401
    
    # Process attack data
    attack_data = request.json
    
    print(f"üö® Attack detected!")
    print(f"   Source IP: {attack_data.get('source_ip')}")
    print(f"   Attack Type: {attack_data.get('attack_type')}")
    print(f"   Threat Score: {attack_data.get('threat_score')}")
    print(f"   Target: {attack_data.get('target_honeypot')}")
    
    # Log to your database
    log_attack_to_database(attack_data)
    
    # Send alert to your admin team
    send_admin_alert(attack_data)
    
    # Update your security dashboard
    update_security_dashboard(attack_data)
    
    return jsonify({'status': 'received', 'message': 'Attack logged successfully'}), 200

def log_attack_to_database(attack_data):
    """Log attack data to your database."""
    # Add your database logging logic here
    # Example for SQLAlchemy:
    # attack = SecurityEvent(
    #     source_ip=attack_data['source_ip'],
    #     attack_type=attack_data['attack_type'],
    #     threat_score=attack_data['threat_score'],
    #     timestamp=attack_data['timestamp']
    # )
    # db.session.add(attack)
    # db.session.commit()
    pass

def send_admin_alert(attack_data):
    """Send alert to administrators."""
    # Add your alerting logic here
    # Examples:
    # - Send email notification
    # - Post to Slack channel
    # - Send SMS via Twilio
    # - Create PagerDuty incident
    pass

def update_security_dashboard(attack_data):
    """Update your website's security dashboard."""
    # Add your dashboard update logic here
    # Examples:
    # - Update attack counter
    # - Add to attack timeline
    # - Update threat level indicator
    # - Refresh security metrics
    pass

if __name__ == '__main__':
    app.run(debug=True, port=5000)
'''
    
    with open('website_webhook_example.py', 'w') as f:
        f.write(webhook_code)
    
    print("‚úÖ Webhook example created: website_webhook_example.py")

def deploy_infrastructure():
    """Deploy CerberusMesh infrastructure."""
    print("\nüöÄ Deploying CerberusMesh infrastructure...")
    
    try:
        # Initialize controller
        print("   Initializing controller...")
        subprocess.run([
            sys.executable, 'controller/main.py', '--init'
        ], check=True)
        
        # Deploy honeypots
        print("   Deploying honeypots...")
        subprocess.run([
            sys.executable, 'controller/main.py', 
            '--deploy', '--count', '2'
        ], check=True)
        
        print("‚úÖ Infrastructure deployed successfully")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Deployment failed: {e}")
        return False

def start_services():
    """Start CerberusMesh services."""
    print("\nüèÉ Starting CerberusMesh services...")
    
    print("Starting services in background...")
    print("   - AI Agent: python agent/cerberus_agent.py")
    print("   - Dashboard: python integrations/grafana_ui.py")
    print("   - API Server: python api/server.py")
    
    print("\nüåê Services will be available at:")
    print("   - Dashboard: http://localhost:3000")
    print("   - API: http://localhost:8000")
    print("   - Health Check: http://localhost:8000/health")

def main():
    """Main deployment flow."""
    print("üî• CerberusMesh Quick Start Deployment")
    print("=" * 50)
    
    # Check requirements
    if not check_requirements():
        return
    
    # Collect API keys
    config = collect_api_keys()
    
    # Create environment file
    create_env_file(config)
    
    # Install dependencies
    if not install_dependencies():
        return
    
    # Test connections
    if not test_aws_connection():
        print("‚ö†Ô∏è  AWS connection failed. Please check your credentials.")
        return
    
    if config.get('OPENAI_API_KEY'):
        test_openai_connection()
    
    # Create webhook example
    if config.get('WEBHOOK_URL'):
        create_webhook_example()
    
    # Deploy infrastructure
    deploy_choice = input("\nüöÄ Deploy honeypot infrastructure now? (y/n): ").strip().lower()
    if deploy_choice == 'y':
        if deploy_infrastructure():
            start_services()
    
    print("\nüéâ CerberusMesh setup complete!")
    print("\nüìã Next Steps:")
    print("1. Review your .env file")
    print("2. Implement webhook_example.py in your website")
    print("3. Start monitoring: python agent/cerberus_agent.py")
    print("4. Access dashboard: http://localhost:3000")
    print("5. Monitor logs: tail -f controller.log")
    
    print("\nüîó Integration with your website:")
    if config.get('WEBHOOK_URL'):
        print(f"   Webhook URL: {config['WEBHOOK_URL']}")
        print("   See website_webhook_example.py for implementation")
    else:
        print("   Add WEBHOOK_URL to .env to enable website integration")
    
    print("\nüìö Documentation:")
    print("   - Full guide: DEPLOYMENT_GUIDE.md")
    print("   - Integration examples: integrations/config_examples.py")
    print("   - API docs: http://localhost:8000/docs")

if __name__ == "__main__":
    main()
